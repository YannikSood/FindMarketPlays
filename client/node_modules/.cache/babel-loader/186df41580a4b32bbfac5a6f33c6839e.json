{"ast":null,"code":"import _slicedToArray from\"/Users/yanniksood/Desktop/FindMarketPlays.com/FindMarketPlays/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,Fragment,useRef}from'react';import{connect,useDispatch}from'react-redux';import{Row,Col,Container,Form,Button}from'react-bootstrap';import ReactQuill from'react-quill';import{useHistory}from'react-router-dom';import ScrollingWidget from'../Widgets/ScrollingWidget';import*as ROUTES from'../../routes/routes';import firebase from'../../firebase/firebase';import validateNote from'../../validations/note.js';import{receiveErrors}from'../../actions/notes.js';import NoteErrors from'../Errors/NoteErrors';var NewNote=function NewNote(_ref){var isAuthed=_ref.isAuthed,currentUser=_ref.currentUser;// Hooks\nvar dispatch=useDispatch();var history=useHistory();var _useState=useState(''),_useState2=_slicedToArray(_useState,2),bodyValue=_useState2[0],setBodyValue=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),titleValue=_useState4[0],setTitleValue=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),noteErrors=_useState6[0],setErrors=_useState6[1];var ref=useRef();useEffect(function(){if(!isAuthed){history.push(ROUTES.LOGIN);}},[isAuthed,history]);// Handlers\nvar handleSubmit=function handleSubmit(){if(currentUser){// console.log('Payload for note submission: ', bodyValue); // eslint-disable-line\nvar newNoteKey=firebase.database().ref('notes').push().key;var data={title:titleValue,body:bodyValue,createdBy:currentUser.id,createdAt:new Date().getTime(),id:newNoteKey};var updates={};updates[\"/notes/\".concat(newNoteKey)]=data;updates[\"/user-notes/\".concat(currentUser.id,\"/\").concat(newNoteKey)]=data;var bodyText=ref.current.getEditor().getText().replace(/\\n/ig,'');var _validateNote=validateNote(titleValue,bodyText),errors=_validateNote.errors,isValid=_validateNote.isValid;if(!isValid){setErrors(errors);dispatch(receiveErrors(errors));return;}else{firebase.database().ref().update(updates).then(function(){setBodyValue('');setTitleValue('');history.push('/notes');}).catch(function(err){return console.log('error posting note: ',err);});}// this statement seems unncessary, because the user cannot access notes if they are not logged in\n// else {\n//   console.log('Error: User not logged in');\n// }   \n}};var handleCancel=function handleCancel(){setBodyValue('');setTitleValue('');history.push('/notes');};return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(ScrollingWidget,null),/*#__PURE__*/React.createElement(Container,null,NoteErrors(noteErrors),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(Form.Group,null,/*#__PURE__*/React.createElement(Form.Control,{type:\"text\",value:titleValue,onChange:function onChange(e){return setTitleValue(e.target.value);},placeholder:\"Title (required)\"}))),/*#__PURE__*/React.createElement(ReactQuill,{theme:\"snow\",value:bodyValue,onChange:setBodyValue,id:\"notes-container\",placeholder:\"Compose a note (required)\",ref:ref}),/*#__PURE__*/React.createElement(Button,{className:\"mr-3 mt-4\",variant:\"primary\",onClick:handleSubmit},\"Create\"),/*#__PURE__*/React.createElement(Button,{className:\"mr-3 mt-4\",variant:\"secondary\",onClick:handleCancel},\"Cancel\")))));};var mapStateToProps=function mapStateToProps(state){var auth=state.auth;return{currentUser:auth.currentUser,isAuthed:auth.isAuthed};};export default connect(mapStateToProps)(NewNote);","map":{"version":3,"sources":["/Users/yanniksood/Desktop/FindMarketPlays.com/FindMarketPlays/client/src/components/Notes/NewNote.js"],"names":["React","useState","useEffect","Fragment","useRef","connect","useDispatch","Row","Col","Container","Form","Button","ReactQuill","useHistory","ScrollingWidget","ROUTES","firebase","validateNote","receiveErrors","NoteErrors","NewNote","isAuthed","currentUser","dispatch","history","bodyValue","setBodyValue","titleValue","setTitleValue","noteErrors","setErrors","ref","push","LOGIN","handleSubmit","newNoteKey","database","key","data","title","body","createdBy","id","createdAt","Date","getTime","updates","bodyText","current","getEditor","getText","replace","errors","isValid","update","then","catch","err","console","log","handleCancel","e","target","value","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment, useRef } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { Row, Col, Container, Form, Button } from 'react-bootstrap';\nimport ReactQuill from 'react-quill';\nimport { useHistory } from 'react-router-dom';\nimport ScrollingWidget from '../Widgets/ScrollingWidget';\nimport * as ROUTES from '../../routes/routes';\nimport firebase from '../../firebase/firebase';\nimport validateNote from '../../validations/note.js';\nimport { receiveErrors } from '../../actions/notes.js';\nimport NoteErrors from '../Errors/NoteErrors';\n\n\nconst NewNote = ({ isAuthed, currentUser }) => {\n  // Hooks\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [bodyValue, setBodyValue] = useState('');\n  const [titleValue, setTitleValue] = useState('');\n  const[noteErrors, setErrors] = useState({});\n  const ref = useRef();\n\n  useEffect(() => {\n    if (!isAuthed) {\n      history.push(ROUTES.LOGIN);\n    }\n  }, [isAuthed, history]);\n\n  // Handlers\n  const handleSubmit = () => {\n    if (currentUser) {\n      // console.log('Payload for note submission: ', bodyValue); // eslint-disable-line\n      const newNoteKey = firebase.database().ref('notes').push().key;\n      const data = {\n        title: titleValue,\n        body: bodyValue,\n        createdBy: currentUser.id,\n        createdAt: new Date().getTime(),\n        id: newNoteKey,\n      };\n      const updates = {};\n      updates[`/notes/${newNoteKey}`] = data;\n      updates[`/user-notes/${currentUser.id}/${newNoteKey}`] = data;\n      \n      let bodyText = ref.current.getEditor().getText().replace(/\\n/ig, '');\n      const { errors, isValid } = validateNote(titleValue, bodyText);\n      if (!isValid) {\n        setErrors(errors);\n        dispatch(receiveErrors(errors));\n        return;\n      } else {\n        firebase.database().ref().update(updates)\n            .then(() => {\n              setBodyValue('');\n              setTitleValue('');\n              history.push('/notes');\n            })\n            .catch(err => console.log('error posting note: ', err));\n        } \n        // this statement seems unncessary, because the user cannot access notes if they are not logged in\n        // else {\n        //   console.log('Error: User not logged in');\n        // }   \n      }\n\n\n  };\n\n  const handleCancel = () => {\n    setBodyValue('');\n    setTitleValue('');\n    history.push('/notes');\n  };\n\n  return (\n    <Fragment>\n      <ScrollingWidget />\n      <Container>\n        {NoteErrors(noteErrors)}\n        <Row>\n          <Col>\n            <Form>\n              <Form.Group>\n                <Form.Control\n                  type=\"text\"\n                  value={titleValue}\n                  onChange={e => setTitleValue(e.target.value)}\n                  placeholder=\"Title (required)\"\n                />\n              </Form.Group>\n            </Form>\n            <ReactQuill\n              theme=\"snow\"\n              value={bodyValue}\n              onChange={setBodyValue}\n              id=\"notes-container\"\n              placeholder=\"Compose a note (required)\"\n              ref={ref}\n            />\n            <Button className=\"mr-3 mt-4\" variant=\"primary\" onClick={handleSubmit}>Create</Button>\n            <Button className=\"mr-3 mt-4\" variant=\"secondary\" onClick={handleCancel}>Cancel</Button>\n          </Col>\n        </Row>\n      </Container>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { auth } = state;\n\n  return {\n    currentUser: auth.currentUser,\n    isAuthed: auth.isAuthed,\n  };\n};\nexport default connect(mapStateToProps)(NewNote);\n"]},"metadata":{},"sourceType":"module"}