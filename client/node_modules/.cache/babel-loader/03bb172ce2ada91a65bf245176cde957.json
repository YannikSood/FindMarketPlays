{"ast":null,"code":"var _jsxFileName = \"/Users/yanniksood/Desktop/FindMarketPlays.com/FindMarketPlays/client/src/components/Notes/NewNote.js\";\nimport React, { useState, useEffect, Fragment, useRef } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { Row, Col, Container, Form, Button } from 'react-bootstrap';\nimport ReactQuill from 'react-quill';\nimport { useHistory } from 'react-router-dom';\nimport ScrollingWidget from '../Widgets/ScrollingWidget';\nimport * as ROUTES from '../../routes/routes';\nimport firebase from '../../firebase/firebase';\nimport validateNote from '../../validations/note.js.js';\nimport { receiveErrors } from '../../actions/notes.js';\nimport NoteErrors from '../Errors/NoteErrors';\n\nconst NewNote = ({\n  isAuthed,\n  currentUser\n}) => {\n  // Hooks\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [bodyValue, setBodyValue] = useState('');\n  const [titleValue, setTitleValue] = useState('');\n  const [noteErrors, setErrors] = useState({});\n  const ref = useRef();\n  useEffect(() => {\n    if (!isAuthed) {\n      history.push(ROUTES.LOGIN);\n    }\n  }, [isAuthed, history]); // Handlers\n\n  const handleSubmit = () => {\n    if (currentUser) {\n      // console.log('Payload for note submission: ', bodyValue); // eslint-disable-line\n      const newNoteKey = firebase.database().ref('notes').push().key;\n      const data = {\n        title: titleValue,\n        body: bodyValue,\n        createdBy: currentUser.id,\n        createdAt: new Date().getTime(),\n        id: newNoteKey\n      };\n      const updates = {};\n      updates[`/notes/${newNoteKey}`] = data;\n      updates[`/user-notes/${currentUser.id}/${newNoteKey}`] = data;\n      let bodyText = ref.current.getEditor().getText().replace(/\\n/ig, '');\n      const {\n        errors,\n        isValid\n      } = validateNote(titleValue, bodyText);\n\n      if (!isValid) {\n        setErrors(errors);\n        dispatch(receiveErrors(errors));\n        return;\n      } else {\n        firebase.database().ref().update(updates).then(() => {\n          setBodyValue('');\n          setTitleValue('');\n          history.push('/notes');\n        }).catch(err => console.log('error posting note: ', err));\n      } // this statement seems unncessary, because the user cannot access notes if they are not logged in\n      // else {\n      //   console.log('Error: User not logged in');\n      // }   \n\n    }\n  };\n\n  const handleCancel = () => {\n    setBodyValue('');\n    setTitleValue('');\n    history.push('/notes');\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ScrollingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, NoteErrors(noteErrors), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    value: titleValue,\n    onChange: e => setTitleValue(e.target.value),\n    placeholder: \"Title (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(ReactQuill, {\n    theme: \"snow\",\n    value: bodyValue,\n    onChange: setBodyValue,\n    id: \"notes-container\",\n    placeholder: \"Compose a note (required)\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 mt-4\",\n    variant: \"primary\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 mt-4\",\n    variant: \"secondary\",\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Cancel\")))));\n};\n\nconst mapStateToProps = state => {\n  const {\n    auth\n  } = state;\n  return {\n    currentUser: auth.currentUser,\n    isAuthed: auth.isAuthed\n  };\n};\n\nexport default connect(mapStateToProps)(NewNote);","map":{"version":3,"sources":["/Users/yanniksood/Desktop/FindMarketPlays.com/FindMarketPlays/client/src/components/Notes/NewNote.js"],"names":["React","useState","useEffect","Fragment","useRef","connect","useDispatch","Row","Col","Container","Form","Button","ReactQuill","useHistory","ScrollingWidget","ROUTES","firebase","validateNote","receiveErrors","NoteErrors","NewNote","isAuthed","currentUser","dispatch","history","bodyValue","setBodyValue","titleValue","setTitleValue","noteErrors","setErrors","ref","push","LOGIN","handleSubmit","newNoteKey","database","key","data","title","body","createdBy","id","createdAt","Date","getTime","updates","bodyText","current","getEditor","getText","replace","errors","isValid","update","then","catch","err","console","log","handleCancel","e","target","value","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment, useRef } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { Row, Col, Container, Form, Button } from 'react-bootstrap';\nimport ReactQuill from 'react-quill';\nimport { useHistory } from 'react-router-dom';\nimport ScrollingWidget from '../Widgets/ScrollingWidget';\nimport * as ROUTES from '../../routes/routes';\nimport firebase from '../../firebase/firebase';\nimport validateNote from '../../validations/note.js.js';\nimport { receiveErrors } from '../../actions/notes.js';\nimport NoteErrors from '../Errors/NoteErrors';\n\n\nconst NewNote = ({ isAuthed, currentUser }) => {\n  // Hooks\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [bodyValue, setBodyValue] = useState('');\n  const [titleValue, setTitleValue] = useState('');\n  const[noteErrors, setErrors] = useState({});\n  const ref = useRef();\n\n  useEffect(() => {\n    if (!isAuthed) {\n      history.push(ROUTES.LOGIN);\n    }\n  }, [isAuthed, history]);\n\n  // Handlers\n  const handleSubmit = () => {\n    if (currentUser) {\n      // console.log('Payload for note submission: ', bodyValue); // eslint-disable-line\n      const newNoteKey = firebase.database().ref('notes').push().key;\n      const data = {\n        title: titleValue,\n        body: bodyValue,\n        createdBy: currentUser.id,\n        createdAt: new Date().getTime(),\n        id: newNoteKey,\n      };\n      const updates = {};\n      updates[`/notes/${newNoteKey}`] = data;\n      updates[`/user-notes/${currentUser.id}/${newNoteKey}`] = data;\n      \n      let bodyText = ref.current.getEditor().getText().replace(/\\n/ig, '');\n      const { errors, isValid } = validateNote(titleValue, bodyText);\n      if (!isValid) {\n        setErrors(errors);\n        dispatch(receiveErrors(errors));\n        return;\n      } else {\n        firebase.database().ref().update(updates)\n            .then(() => {\n              setBodyValue('');\n              setTitleValue('');\n              history.push('/notes');\n            })\n            .catch(err => console.log('error posting note: ', err));\n        } \n        // this statement seems unncessary, because the user cannot access notes if they are not logged in\n        // else {\n        //   console.log('Error: User not logged in');\n        // }   \n      }\n\n\n  };\n\n  const handleCancel = () => {\n    setBodyValue('');\n    setTitleValue('');\n    history.push('/notes');\n  };\n\n  return (\n    <Fragment>\n      <ScrollingWidget />\n      <Container>\n        {NoteErrors(noteErrors)}\n        <Row>\n          <Col>\n            <Form>\n              <Form.Group>\n                <Form.Control\n                  type=\"text\"\n                  value={titleValue}\n                  onChange={e => setTitleValue(e.target.value)}\n                  placeholder=\"Title (required)\"\n                />\n              </Form.Group>\n            </Form>\n            <ReactQuill\n              theme=\"snow\"\n              value={bodyValue}\n              onChange={setBodyValue}\n              id=\"notes-container\"\n              placeholder=\"Compose a note (required)\"\n              ref={ref}\n            />\n            <Button className=\"mr-3 mt-4\" variant=\"primary\" onClick={handleSubmit}>Create</Button>\n            <Button className=\"mr-3 mt-4\" variant=\"secondary\" onClick={handleCancel}>Cancel</Button>\n          </Col>\n        </Row>\n      </Container>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { auth } = state;\n\n  return {\n    currentUser: auth.currentUser,\n    isAuthed: auth.isAuthed,\n  };\n};\nexport default connect(mapStateToProps)(NewNote);\n"]},"metadata":{},"sourceType":"module"}